'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var request = require('@octokit/request');
var LRU = _interopDefault(require('lru-cache'));
var jsonwebtoken = _interopDefault(require('jsonwebtoken'));

// https://github.com/isaacs/node-lru-cache#readme
function getCache() {
  return new LRU({
    // cache max. 15000 tokens, that will use less than 10mb memory
    max: 15000,
    // Cache for 59 minutes (1 minute less than GitHub expiry)
    maxAge: 1000 * 60 * 59
  });
}

function getSignedJsonWebToken({
  id,
  privateKey
}) {
  const now = Math.floor(Date.now() / 1000);
  const payload = {
    iat: now,
    exp: now + 60 * 10 - 30,
    iss: id
  };
  const token = jsonwebtoken.sign(payload, privateKey, {
    algorithm: "RS256"
  });
  return token;
}

function getInstallationAccessToken(state, {
  installationId,
  repositoryIds,
  permissions
}) {
  const token = state.cache.get(installationId);

  if (token) {
    return Promise.resolve(token);
  }

  return state.request({
    method: "POST",
    url: "/app/installations/:installation_id/access_tokens",
    installation_id: installationId,
    headers: {
      accept: "application/vnd.github.machine-man-preview+json",
      // TODO: cache the installation token if it's been less than 60 minutes
      authorization: `bearer ${getSignedJsonWebToken(state)}`
    },
    repository_ids: repositoryIds,
    permissions
  }).then(response => {
    state.cache.set(installationId, response.data.token);
    return response.data.token;
  });
}

class App {
  constructor({
    id,
    privateKey,
    baseUrl,
    cache
  }) {
    const state = {
      id,
      privateKey,
      request: baseUrl ? request.request.defaults({
        baseUrl
      }) : request.request,
      cache: cache || getCache()
    };
    this.getSignedJsonWebToken = getSignedJsonWebToken.bind(null, state);
    this.getInstallationAccessToken = getInstallationAccessToken.bind(null, state);
  }

}

exports.App = App;
