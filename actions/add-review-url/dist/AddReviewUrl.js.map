{"version":3,"sources":["../src/AddReviewUrl.js"],"names":["graphql","require","core","AddComment","getOwnerAndRepo","process","env","GITHUB_REPOSITORY","owner","repo","split","Error","getGraphqlWithAuth","token","getInput","defaults","headers","authorization","addPullRequestCommentMutation","getPullNumber","GITHUB_REF","parseInt","findPullRequestQuery","addCommentUsingSubjectId","pullRequestId","comment","obj","JSON","parse","stringify","graphqlWithAuth","subjectId","repository","pullRequest","id","body","addComment","nameAndRepo","findPullRequestIdQuery","getSubjectId","e","pullNumber"],"mappings":"AAAA,MAAM,EAACA,OAAD,KAAYC,QAAQ,kBAAR,CAAlB;AACA,MAAM,EAACC,IAAD,KAASD,QAAQ,eAAR,CAAf;;AAEA,MAAME,UAAN,CAAiB;;AAEfC,oBAAkB;AAChB,QAAIC,QAAQC,GAAR,CAAYC,iBAAhB,EAAmC;AACjC,YAAM,CAACC,KAAD,EAAQC,IAAR,IAAgBJ,QAAQC,GAAR,CAAYC,iBAAZ,CAA8BG,KAA9B,CAAoC,GAApC,CAAtB;AACA,aAAO,EAAC,SAASF,KAAV,EAAiB,QAAQC,IAAzB,EAAP;AAED,KAJD,MAIO;AACL,YAAM,IAAIE,KAAJ,CAAU,uDAAV,CAAN;AACD;AACF;;AAEDC,uBAAqB;AACnB,UAAMC,QAAQX,KAAKY,QAAL,CAAc,YAAd,CAAd;AACA,WAAOd,QAAQe,QAAR,CAAiB;AACtBC,eAAS;AACPC,uBAAgB,SAAQJ,KAAM;AADvB;AADa,KAAjB,CAAP;AAKD;;AAEDK,kCAAgC;AAC9B,WAAQ;;;;;;;;;;;;EAAR;AAaD;;AAEDC,kBAAgB;AACd,QAAId,QAAQC,GAAR,CAAYc,UAAhB,EAA4B;AAC1B,aAAOC,SAAShB,QAAQC,GAAR,CAAYc,UAAZ,CAAuBV,KAAvB,CAA6B,GAA7B,EAAkC,CAAlC,CAAT,CAAP;AACD;AACF;;AAEDE,uBAAqB;AACnB,UAAMC,QAAQX,KAAKY,QAAL,CAAc,YAAd,CAAd;AACA,WAAOd,QAAQe,QAAR,CAAiB;AACtBC,eAAS;AACPC,uBAAgB,SAAQJ,KAAM;AADvB;AADa,KAAjB,CAAP;AAKD;;AAEDS,yBAAuB;AACrB,WAAQ;;;;;;EAAR;AAOD;;AAEDC,2BAAyBC,aAAzB,EAAwCC,OAAxC,EAAiD;AAC/C,QAAIC,MAAMC,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAeL,aAAf,CAAX,CAAV;AACA,UAAMM,kBAAkB,KAAKlB,kBAAL,EAAxB;AACAkB,oBAAgB,KAAKZ,6BAAL,EAAhB,EAAsD;AAClDa,iBAAWL,IAAIM,UAAJ,CAAeC,WAAf,CAA2BC,EADY;AAElDC,YAAMV;AAF4C,KAAtD;AAMD;;AAED,QAAMW,UAAN,CAAiBX,OAAjB,EAA0B;AACxB,UAAMY,cAAc,KAAKjC,eAAL,EAApB;AACA,UAAM0B,kBAAkB,KAAKlB,kBAAL,EAAxB;AACA,UAAM0B,yBAAyB,KAAKhB,oBAAL,EAA/B;AACA,QAAI;AACF,YAAMS,YAAY,MAAM,KAAKQ,YAAL,CAAkBT,eAAlB,EAAmCQ,sBAAnC,EAA2DD,WAA3D,CAAxB;AACA,YAAM,KAAKd,wBAAL,CAA8BQ,SAA9B,EAAyCN,OAAzC,CAAN;AACD,KAHD,CAGE,OAAOe,CAAP,EAAU,CACX;AACF;;AAEDD,eAAaT,eAAb,EAA8BQ,sBAA9B,EAAsDD,WAAtD,EAAmE;AACjEP,oBAAgBQ,sBAAhB,EAAwC;AACpC9B,aAAO6B,YAAY7B,KADiB;AAEpCC,YAAM4B,YAAY5B,IAFkB;AAGpCgC,kBAAY,KAAKtB,aAAL;AAHwB,KAAxC;AAMD;AA3Fc;;AA8FjB,eAAehB,UAAf","file":"AddReviewUrl.js","sourcesContent":["const {graphql} = require('@octokit/graphql');\r\nconst {core} = require('@actions/core');\r\n\r\nclass AddComment {\r\n\r\n  getOwnerAndRepo() {\r\n    if (process.env.GITHUB_REPOSITORY) {\r\n      const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');\r\n      return {'owner': owner, 'repo': repo};\r\n\r\n    } else {\r\n      throw new Error('not able to obtain GITHUB_REPOSITORY from process.env');\r\n    }\r\n  }\r\n\r\n  getGraphqlWithAuth() {\r\n    const token = core.getInput('repo-token');\r\n    return graphql.defaults({\r\n      headers: {\r\n        authorization: `token ${token}`,\r\n      },\r\n    });\r\n  }\r\n\r\n  addPullRequestCommentMutation() {\r\n    return `mutation AddPullRequestComment($subjectId: ID!, $body: String!) {\r\n  addComment(input:{subjectId:$subjectId, body: $body}) {\r\n    commentEdge {\r\n        node {\r\n        createdAt\r\n        body\r\n      }\r\n    }\r\n    subject {\r\n      id\r\n    }\r\n  }\r\n}`;\r\n  }\r\n\r\n  getPullNumber() {\r\n    if (process.env.GITHUB_REF) {\r\n      return parseInt(process.env.GITHUB_REF.split('/')[2]);\r\n    }\r\n  }\r\n\r\n  getGraphqlWithAuth() {\r\n    const token = core.getInput('repo-token');\r\n    return graphql.defaults({\r\n      headers: {\r\n        authorization: `token ${token}`,\r\n      },\r\n    });\r\n  }\r\n\r\n  findPullRequestQuery() {\r\n    return `query FindPullRequestID ($owner: String!, $repo: String!, $pullNumber: Int!){\r\n  repository(owner:$owner, name:$repo) {\r\n    pullRequest(number:$pullNumber) {\r\n      id\r\n    }\r\n  }\r\n}`;\r\n  }\r\n\r\n  addCommentUsingSubjectId(pullRequestId, comment) {\r\n    let obj = JSON.parse(JSON.stringify(pullRequestId));\r\n    const graphqlWithAuth = this.getGraphqlWithAuth();\r\n    graphqlWithAuth(this.addPullRequestCommentMutation(), {\r\n        subjectId: obj.repository.pullRequest.id,\r\n        body: comment,\r\n      },\r\n    );\r\n\r\n  }\r\n\r\n  async addComment(comment) {\r\n    const nameAndRepo = this.getOwnerAndRepo();\r\n    const graphqlWithAuth = this.getGraphqlWithAuth();\r\n    const findPullRequestIdQuery = this.findPullRequestQuery();\r\n    try {\r\n      const subjectId = await this.getSubjectId(graphqlWithAuth, findPullRequestIdQuery, nameAndRepo);\r\n      await this.addCommentUsingSubjectId(subjectId, comment);\r\n    } catch (e) {\r\n    }\r\n  }\r\n\r\n  getSubjectId(graphqlWithAuth, findPullRequestIdQuery, nameAndRepo) {\r\n    graphqlWithAuth(findPullRequestIdQuery, {\r\n        owner: nameAndRepo.owner,\r\n        repo: nameAndRepo.repo,\r\n        pullNumber: this.getPullNumber(),\r\n      },\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddComment;"]}